from pathlib import Path
path = Path('OptiChat/tests/test_water_network_enhancements.py')
text = path.read_text('utf-8')
old = "def test_state_linear_coupling_constraint_exists() -> None:\n    cfg = _base_config()\n    model = build_water_network_model(cfg)\n\n    assert hasattr(model, \"state_linear_coupling\"), \"linear coupling constraint missing\"\n    index = list(model.state_linear_coupling_index)\n    assert index, \"linear coupling index should not be empty\"\n    constraint = model.state_linear_coupling[index[0], \"t0\"]\n    assert constraint is not None\n    coupling_info = export_state_coupling_jacobian(model)\n    assert coupling_info\n    assert coupling_info[0][\"slope\"] == pytest.approx(0.02, rel=1e-6)\n    piecewise_info = export_state_piecewise_tables(model)\n    assert piecewise_info\n    gate_tables = export_gate_opening_tables(model)\n    assert gate_tables\n    assert len(gate_tables[0][\"breakpoints\"]) >= 3\n    sos2_tables = export_sos2_cost_tables(model)\n    assert sos2_tables and any(entry[\"edge\"] == \"pump_edge\" for entry in sos2_tables)\n\n\n"
new = "def test_state_piecewise_and_gate_tables() -> None:\n    cfg = _base_config()\n    model = build_water_network_model(cfg)\n\n    piecewise_info = export_state_piecewise_tables(model)\n    assert piecewise_info\n    assert any(entry[\"target\"][0] == \"tailwater\" for entry in piecewise_info)\n\n    gate_tables = export_gate_opening_tables(model)\n    assert gate_tables\n    assert len(gate_tables[0][\"breakpoints\"]) >= 3\n\n    sos2_tables = export_sos2_cost_tables(model)\n    assert sos2_tables and any(entry[\"edge\"] == \"pump_edge\" for entry in sos2_tables)\n\n\n"
if old not in text:
    raise SystemExit('pattern not found in test file')
path.write_text(text.replace(old, new, 1), encoding='utf-8')
